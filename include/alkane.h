/* Header file for C-compatible variables/functions in alkane.f90 *//* Set, get the number of chains in each simulation box/replica */void alkane_get_nchains(int *nchains);void alkane_set_nchains(int nchains);/* Set, get the number of beads on each chain */void alkane_get_nbeads(int *nbeads);void alkane_set_nbeads(int nbeads);/* Initialise/destroy the alkane module data structures */void alkane_init();void alkane_construct_linked_lists(int ibox);void alkane_destroy();/* Grow a chain using CBMC */void alkane_grow_chain(int ichain, int ibox, double *rbfactor, int new_conf, int *ifail);/* Get a chain */void alkane_get_chain(int ichain, int ibox, int *nbeads_out,int *d_out, double **rchain_ptr);/* Translation, rotation of a chain */void alkane_translate_chain(int ichain, int ibox, double *boltz_out);void alkane_rotate_chain(int ichain, int ibox, double *boltz_out, double quat[4], int bond);/* Rotate around a torsion angle */void alkane_bond_rotate(int ichain, int ibox, double *boltz_out, int *ia, double *angle, int allow_flip);/* Check if any chain overlaps with some over chain (for consistency checking) */void alkane_check_chain_overlap(int ibox, int *overlap);/* Check that a chain has the correct internal geometry (for constency checking) */void alkane_check_chain_geometry(int ichain, int ibox, int *violated);/* Update linked lists - for use after accepting any move which changes bead positions */void alkane_update_linked_lists(int ibead, int ichain, int ibox, double old_pos[3], double new_pos[3]);/* Construct Verlet lists if we're using those instead of link cells. */void alkane_construct_neighbour_list(int ibox);